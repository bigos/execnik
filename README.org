* execnik

** author info: Jacek Podkanski

This is a project to demonstrate ability of creation cross-platform Gtk
applications in SBCL.

** License

Public Domain

** interesting links

https://github.com/plops/cl-cffi-gtk-from-repl

** Usage

*** REPL

Add directory with the project as in the following example

#+BEGIN_SRC lisp
  (push #p "c:/Users/Jacek/Documents/Programming/Lisp/execnik/" asdf:*central-registry*)
  (ql:quickload :execnik)
  (in-package :execnik)
#+END_SRC

*** compilation and running

#+BEGIN_EXAMPLE
sbcl --load ./compilation.lisp
./execnik.exe
#+END_EXAMPLE

**** Running on Linux

On Linux it works in terminal and file managers.

**** Runnning on Windows

It also works in File Explorer on Windows if you have Msys2 and gtk libraries
installed and ~C:\msys64\mingw64\bin~ path added to your environment variables.

If you do not have the ~mingw64\bin~ path added to your environment you need to
start Msys2 terminal, cd to the executable and start it from the terminal.

*** Distribution of binary on Windows

**** suggested solution

Ideal solution would be creation of distributable package similar to:
https://github.com/msys2/msys2/wiki/Distributing

**** Styrene

I decided to try Styrene

https://github.com/achadwick/styrene

***** cfg file

Next, I have created ~execnik.cfg~ file, which will be used to compile a Windows
installer. As a template I used ~gtk3-examples.cfg~ copied from styrene
repository.

***** building

I started Msys2 terminal entered styrene folder and ran:

#+BEGIN_EXAMPLE
./styrene.sh -o ./tmp/ /c/Users/Jacek/Documents/Programming/Lisp/execnik/execnik.cfg
#+END_EXAMPLE

That has lead to realization that I need to create a pacman package first.

******  possible clue
 https://blogs.gnome.org/nacho/2014/08/01/how-to-build-your-gtk-application-on-windows/

****** cont

install build packages for msys2
https://github.com/msys2/MSYS2-packages

creating packages
https://github.com/msys2/msys2/wiki/Creating-Packages

Native Windows software (from this project's perspective) is software that
doesn't depend on msys-2.0.dll, and links dynamically to the highly compatible
~msvcrt.dll.~

****** that has led to a dead end

too much hassle with too many variables and hard to reason build and having to
switch between different terminal types

***** Another experiment

Creating distribution folder, copying bin and shared folders from mingw64 and
copying my executable to bin creates bloated folder that can be possibly
distributed.

So now we need to figure out how to copy only the files we need and create a
decent installer.

https://github.com/gtk-rs/gtk/issues/422

****** use sbcl to

create or empty distribution folder

******* in the bin folder
C:\msys64\mingw64\bin

 copy libraries indicated by ~Listdlls64.exe~
 copy execnik.exe

******* in the shared folder
C:\msys64\mingw64\share

#+BEGIN_EXAMPLE
share\glib-2.0\schemas\*
      icons\Adwaita\*
            hicolor\*
#+END_EXAMPLE
